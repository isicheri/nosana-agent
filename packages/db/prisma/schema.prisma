// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String?
  password String?
  profile  Profile? @relation("userprofile")
  sessions Session[]
}

model Profile {
  id       String @id @default(uuid())
  bio      String?
  fullname String?
  email    String?
  userId   String @unique
  user     User   @relation("userprofile", fields: [userId], references: [id])
}

model Resource {
  id                String    @id @default(uuid())
  filename          String    // The original name of the uploaded file
  content           String    // The full text content
  chunks            String[]  // The text broken into chunks for RAG
  embeddingsStoreId String?   // Pointer to the vector database
  summaries         Summary[] // A Resource can have multiple Summaries
  sessions          Session[] @relation("SessionResources")
  createdAt         DateTime  @default(now())
}


model Summary {
  id            String         @id @default(uuid())
  resourceId    String
  resource      Resource       @relation(fields: [resourceId], references: [id])
  outline       Json           // Store the structured summary data (sections, TL;DR) as JSON
  generatedAt   DateTime       @default(now())
  flashcardSets FlashCardSet[]

  @@index([resourceId])
}

model Session {
  id        String    @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  history   Message[]
  resources Resource[] @relation("SessionResources")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model FlashCardSet {
  id          String   @id @default(uuid())
  summaryId   String
  summary     Summary  @relation(fields: [summaryId], references: [id])
  cards       Json     // Store array of {question, answer} as JSON
  generatedAt DateTime @default(now())

  @@index([summaryId])
}

model Message {
  id        String   @id @default(uuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id])
  role      String   // 'user' or 'agent'
  text      String
  createdAt DateTime @default(now())

  @@index([sessionId])
}